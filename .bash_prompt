# Quit now if in zsh ###########################################################
if [[ -n "$ZSH_VERSION" ]]; then
  return 1 2> /dev/null || exit 1;
fi;

if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
	export TERM='gnome-256color';
elif infocmp xterm-256color >/dev/null 2>&1; then
	export TERM='xterm-256color';
fi;

prompt_git() {
	local s='';
	local branchName='';

	# Check if the current directory is in a Git repository.
	if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then

		# check if the current directory is in .git before running git checks
		if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

			# Ensure the index is up to date.
			git update-index --really-refresh -q &>/dev/null;

			# Check for uncommitted changes in the index.
			if ! $(git diff --quiet --ignore-submodules --cached); then
				s+='+';
			fi;

			# Check for unstaged changes.
			if ! $(git diff-files --quiet --ignore-submodules --); then
				s+='!';
			fi;

			# Check for untracked files.
			if [ -n "$(git ls-files --others --exclude-standard)" ]; then
				s+='?';
			fi;

			# Check for stashed files.
			if $(git rev-parse --verify refs/stash &>/dev/null); then
				s+='$';
			fi;

		fi;

		# Get the short symbolic ref.
		# If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
		# Otherwise, just give up.
		branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
			git rev-parse --short HEAD 2> /dev/null || \
			echo '(unknown)')";

		[ -n "${s}" ] && s=" [${s}]";

		echo -e "${1}${branchName}${pink}${s}";
	else
		return;
	fi;
}

if tput setaf 1 &> /dev/null; then
	tput sgr0; # reset colors
	bold=$(tput bold);
	reset=$(tput sgr0);
	# Cobalt 2 colors (approx.)
	black=$(tput setaf 0);
	blue=$(tput setaf 26);
	cyan=$(tput setaf 81);
	green=$(tput setaf 76);
	red=$(tput setaf 9);
	violet=$(tput setaf 63);
	white=$(tput setaf 231);
	yellow=$(tput setaf 220);
	magenta=$(tput setaf 197);
	pink=$(tput setaf 207);
	grey=$(tput setaf 145);
else
	bold='';
	reset="\e[0m";
	black="\e[1;30m";
	blue="\e[1;34m";
	cyan="\e[1;36m";
	green="\e[1;32m";
	red="\e[1;31m";
	violet="\e[1;35m";
	white="\e[1;37m";
	yellow="\e[1;33m";
	magenta="\e[1;31m";
	pink="\e[1;35m";
	grey="\e[1;37m";
fi;

# Highlight the user name when logged in as root.
if [[ "${USER}" == "root" ]]; then
	userStyle="${red}";
else
	userStyle="${yellow}";
fi;

# Highlight the hostname when connected via SSH.
if [[ "${SSH_TTY}" ]]; then
	hostStyle="${bold}${red}";
else
	hostStyle="${cyan}";
fi;

# Set the terminal title and prompt.
PS1="\[\033]0;\W\007\]"; # Working directory base name
PS1+="\[${bold}\]\n"; # Newline
PS1+="\[${userStyle}\]\u"; # Username
PS1+="\[${white}\] at ";
PS1+="\[${hostStyle}\]\h"; # Host
PS1+="\[${white}\] in ";
PS1+="\[${green}\]\w"; # Working directory full path
PS1+="\$(prompt_git \"${white} on ${magenta}\")"; # Git repository details
PS1+="\n";
PS1+="\[${white}\]❯ \[${reset}\]"; # `❯` (use something cool) and reset color
export PS1;

PS2="\[${yellow}\]→ \[${reset}\]";
export PS2;
